## Prerequisite
#
# A few secrets are required to be set before running the workflow.
#
# AWS_ACCESS_KEY_ID:
# AWS_ACCESS_ACCESS_KEY:
#   https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html
#
# GITOPS_REPO_TOKEN:
#   A github personal access token, which has full control of private repositories.
#
#   To create a token, follows the the instruction in the link below and be noted that selecting
#   only `repo` and `write:packages` scopes is enough.
#   https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
#
##

## Configurations
#
# Please make sure your recheck whether they match your use case or not.
#
# Sections starting with <!--CONFIG:START--> are configurable. Visit and recheck each of them sequentially.
#
# Configs with <!--CONFIG:APP> are application related configs. They need extra cares
# and must be customized to fit your app. Some of them also have prerequisites documented in-line.
#
##

on:
  push:
    tags:
      - v*

name: Build and deliver to dev

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest

    outputs:
      IMAGE_REPOSITORY: ${{ steps.build-image.outputs.IMAGE_REPOSITORY }}

    # <!--CONFIG:START-->
    env:
      # <!--CONFIG:APP-->
      # Image repositoy on ECR. Make sure it is created.
      # https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html
      IMAGE_REPOSITORY: k8s-gitops-workshop-api-gateway-joe-urairat

      # aws region
      AWS_REGION: ap-southeast-1
    # <!--CONFIG:END>

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Login to GitHub docker registry
        run: |
          GITHUB_REPOSITORY_OWNER=$(echo ${GITHUB_REPOSITORY%/*} | tr '[:upper:]' '[:lower:]')
          echo ${{ github.token }} | docker login https://docker.pkg.github.com -u $GITHUB_REPOSITORY_OWNER --password-stdin

      - name: Pull image cache
        id: image_cache
        run: |
          GITHUB_REPOSITORY_LOWERCASE=$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]')
          CACHE_IMAGE_URI=docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/$IMAGE_REPOSITORY-builder
          # docker pull $CACHE_IMAGE_URI || true
          echo "::set-output name=CACHE_IMAGE_URI::$CACHE_IMAGE_URI"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
          CACHE_IMAGE_URI: ${{ steps.image_cache.outputs.CACHE_IMAGE_URI }}
        run: |
          docker build -t builder --cache-from=$CACHE_IMAGE_URI --target builder .
          docker build -t thing --cache-from=builder .
          docker tag thing $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=IMAGE_REPOSITORY::$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Push image cache
        env:
          CACHE_IMAGE_URI: ${{ steps.image_cache.outputs.CACHE_IMAGE_URI }}
        run: |
          # docker tag builder $CACHE_IMAGE_URI
          # docker push $CACHE_IMAGE_URI

  deploy-mr:
    name: Create MR for deployment
    runs-on: ubuntu-latest

    needs: [build]

    # <!--CONFIG:START-->
    env:
      # these could be remain untouched.
      GIT_EMAIL: action@github.com
      GIT_NAME: GitHub Action

      # <!--CONFIG:APP-->
      # a github repository name that contain gitops configs.
      GIT_TARGET_REPO: scgatthaphon/k8s-gitops-workshop
      # a base brach on target repo for opening a pull request.
      GIT_BASE_BRANCH: main

      # <!--CONFIG:APP-->
      # path to dir containing kustomization.yaml for overriding app's image tag.
      KUSTOMIZE_DIR: hello-world/overlays/dev/ap-southeast-1
      # base image name that allow kustomize to override its image tag.
      KUSTOMIZE_BASE_IMAGE: calculator

      # aws region
      AWS_REGION: ap-southeast-1
    # <!--CONFIG:END-->


    steps:
      - name: Export configs to output
        id: configs
        run: |
          export VERSION=${GITHUB_REF#refs/tags/}

          # <!--CONFIG:START-->
          # <!--CONFIG:APP-->
          # a git branch to which new commits are pushed.
          # also be used to merge into the base branch on a pull request.
          export GIT_BRANCH="deploy/hello-world/calculator-$VERSION"
          # a git commit meassage for overriding an image tag.
          export GIT_COMMIT_MESSAGE="feat(hello/dev/ap-se-1): calculator image $VERSION"
          # a message used for a pull request title
          export GIT_PULL_REQUEST="Deploy calculator service $VERSION"
          # <!--CONFIG:END-->

          echo ::set-output name=VERSION::$VERSION
          echo ::set-output name=GIT_COMMIT_MESSAGE::$GIT_COMMIT_MESSAGE
          echo ::set-output name=GIT_BRANCH::$GIT_BRANCH
          echo ::set-output name=GIT_PULL_REQUEST::$GIT_PULL_REQUEST

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ env.GIT_TARGET_REPO }}
          token: ${{ secrets.GITOPS_REPO_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Config git
        run: |
          git config --global user.email "$GIT_EMAIL"
          git config --global user.name "$GIT_NAME"

      - name: Install kustomize
        run: |
          mkdir $GITHUB_WORKSPACE/bin
          cd $GITHUB_WORKSPACE/bin
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod +x $GITHUB_WORKSPACE/bin/kustomize

      - name: Checkout new branch
        id: get_branch
        env:
          GIT_BRANCH: ${{ steps.configs.outputs.GIT_BRANCH }}
        run: |
          git checkout -b $GIT_BRANCH

      - name: Edit image tag and commit
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPOSITORY: ${{ needs.build.outputs.IMAGE_REPOSITORY }}
          GIT_COMMIT_MESSAGE: ${{ steps.configs.outputs.GIT_COMMIT_MESSAGE }}
        run: |
          cd $KUSTOMIZE_DIR
          kustomize edit set image $KUSTOMIZE_BASE_IMAGE=$ECR_REGISTRY/$IMAGE_REPOSITORY

          git add kustomization.yaml
          git commit -m "$GIT_COMMIT_MESSAGE"

      - name: Push changes & create merge request
        shell: bash
        env:
          GIT_SHA: ${{ github.sha }}
          GIT_BRANCH: ${{ steps.configs.outputs.GIT_BRANCH }}
          GITHUB_TOKEN: ${{ secrets.GITOPS_REPO_TOKEN }}
          GIT_PULL_REQUEST: ${{ steps.configs.outputs.GIT_PULL_REQUEST }}
        run: |
          if [[ `git --no-pager log "$GIT_BASE_BRANCH..$GIT_BRANCH" --decorate=short --pretty=oneline -n1` ]]; then
            git push origin $GIT_BRANCH
            hub pull-request --base $GIT_BASE_BRANCH -m "$GIT_PULL_REQUEST"
          else
            echo 'No changes'
          fi

